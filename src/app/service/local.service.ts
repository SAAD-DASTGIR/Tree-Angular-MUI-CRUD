// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';
// import { Observable } from 'rxjs';

// interface FoodNode {
//   // interface given by angular mui
//   id?: number;
//   name: string;
//   parent?: number;
// }
// interface TreeNode {
//   // custom interface according to strapi
//   id: number;
//   name: string;
//   N_ID?: string | null; // optional bcz strapi also generate itself a id
//   children?: TreeNode[];
// }
// @Injectable({
//   providedIn: 'root',
// })
// export class LocalService {
//   private apiUrl = 'http://localhost:1337/api/trees'; // url from strapi

//   constructor(private http: HttpClient) {} // injecting http module for rest apis

//   getNodes(): Observable<any> {
//     return this.http.get<any>(`${this.apiUrl}?populate=parent`); // display treedata using populate=parent(from root only)
//   }

//   getTreeData(): Observable<TreeNode[]> {
//     return this.http.get<TreeNode[]>(`${this.apiUrl}?populate=*`); // display data until level 1 layer
//   }

//   addTreeNode(payload: any): Observable<any> {
//     return this.http.post(this.apiUrl, payload); // add parent nodes
//   }

//   updateNode(id: number, node: any): Observable<any> {
//     return this.http.put<any>(`${this.apiUrl}/${id}`, { data: node }); // edit parent as well as child nodes
//   }

//   deleteTreeNode(id: number): Observable<void> {
//     return this.http.delete<void>(`${this.apiUrl}/${id}`); // delete using id generated by strapi
//   }

//   addNode(node: any): Observable<any> {
//     return this.http.post<any>(this.apiUrl, { data: node }); //add data to the parent node
//   }

//   addSubNode(subNode: { name: string; parent: number }): Observable<any> {
//     //add sub node using parent id from strapi
//     const payload = {
//       // payload involves data whcih have name of node and id of parent node
//       data: {
//         name: subNode.name,
//         parent: subNode.parent,
//       },
//     };
//     return this.http.post<any>(this.apiUrl, payload);
//   }

//   moveNode(nodeId: number, newParentId: number): Observable<FoodNode> {
//     const payload = {
//       // payload involves data whcih have name of node and id of parent node
//       data: {
//         name: nodeId,
//         parent: newParentId,
//       },
//     };
//     return this.http.put<FoodNode>(`${this.apiUrl}/${nodeId}`, {
//       parent: newParentId,
//     });
//   }

//   nodeExists(name: string, parentNode: TreeNode[] | null| any): boolean {
//     // function to check siblings in subnodes
//     if (!parentNode || !parentNode.children) {
//       // if nothing then return
//       return false;
//     }

//     for (let node of parentNode.children) {
//       // match the node name in children only
//       if (node.name === name) {
//         // if found then return
//         return true;
//       }
//     }
//     return false;
//   }
//   nodeExistsinParent(name: string, nodes: TreeNode[] | any): boolean {
//     // function to check parentnodes
//     for (let node of nodes) {
//       // check in main nodes
//       if (node.name === name) {
//         // if found then return
//         return true;
//       }
//     }
//     return false;
//   }
//   nodeExistsTest(name: string, parentNode: TreeNode[] | null| any): boolean {
//     // function to check siblings in subnodes
//     if (!parentNode || !parentNode.children) {
//       // if nothing then return
//       return false;
//     }

//     for (let node of parentNode.children) {
//       // match the node name in children only
//       if (node.name === name) {
//         // if found then return
//         return true;
//       }
//     }
//     return false;
//   }
// }



// path: src/app/service/local.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

interface TreeNode {
  id: number;
  name: string|any;
  N_ID?: string | null;
  children?: TreeNode[];
  parent?: number | null;
}

@Injectable({
  providedIn: 'root',
})
export class LocalService {
  private apiUrl = 'http://localhost:1337/api/trees';

  constructor(private http: HttpClient) {}

  getNodes(): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}?populate=parent`);
  }

  addTreeNode(payload: any): Observable<any> {
    return this.http.post(this.apiUrl, payload);
  }

  updateNode(id: number, node: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, { data: node });
  }

  deleteTreeNode(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  addSubNode(subNode: { name: string; parent: number }): Observable<any> {
    const payload = {
      data: {
        name: subNode.name,
        parent: subNode.parent,
      },
    };
    return this.http.post<any>(this.apiUrl, payload);
  }


  moveNode(nodeId: number, newParentId: number): Observable<any> {
    const payload = {
      data: {
        parent: newParentId,
      },
    };
    return this.http.put<any>(`${this.apiUrl}/${nodeId}`, payload);
  }

  nodeExists(name: string, parentNode: TreeNode[] | null | any): boolean {
    if (!parentNode || !parentNode.children) {
      return false;
    }

    for (let node of parentNode.children) {
      if (node.name === name) {
        return true;
      }
    }
    return false;
  }

  nodeExistsinParent(name: string, nodes: TreeNode[] | any): boolean {
    for (let node of nodes) {
      if (node.name === name) {
        return true;
      }
    }
    return false;
  }
}
